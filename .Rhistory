}
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
celltype = str_split(str_split(input_files,'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
celltype = str_split(str_split(input_files,'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
for(i in 1:length(input_files)){
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
data=data[rownames(data)%in%rownames(group),]
# 将原数据框，按照指定的列顺序，重新排序
datamerge = data[sapply(rownames(group), function(e) {which(rownames(data) == e)}), ]
datamerge = as.matrix(datamerge)
pdf(paste0(filepath,outpdf),height = 8,width = 8)
pheatmap(datamerge,
annotation_row  = group,
color=colorRampPalette(c("blue", "white", "red"))(50),               #颜色分为50份
cluster_cols = T,                                                    #不执行聚类，否则肿瘤组和对照组会被打乱
cluster_rows = F, #TF
fontsize = 15,
fontsize_row = 15,                                                   #行名显示大小
fontsize_col = 15,                                                   #列名显示大小
border_color = NA
)
dev.off()
}
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
celltype = str_split(str_split(input_files,'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
i=1
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
data=data[rownames(data)%in%rownames(group),]
View(group)
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
celltype = str_split(str_split(input_files,'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
i=1
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
View(group)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
data=data[rownames(data)%in%rownames(group),]
# 将原数据框，按照指定的列顺序，重新排序
datamerge = data[sapply(rownames(group), function(e) {which(rownames(data) == e)}), ]
datamerge = as.matrix(datamerge)
pdf(paste0(filepath,outpdf),height = 8,width = 8)
pheatmap(datamerge,
annotation_row  = group,
color=colorRampPalette(c("blue", "white", "red"))(50),               #颜色分为50份
cluster_cols = T,                                                    #不执行聚类，否则肿瘤组和对照组会被打乱
cluster_rows = F, #TF
fontsize = 15,
fontsize_row = 15,                                                   #行名显示大小
fontsize_col = 15,                                                   #列名显示大小
border_color = NA
)
dev.off()
i=2
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
View(group)
i=2
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
celltype = str_split(str_split(input_files,'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
for(i in 1:length(input_files)){
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
data=data[rownames(data)%in%rownames(group),]
# 将原数据框，按照指定的列顺序，重新排序
datamerge = data[sapply(rownames(group), function(e) {which(rownames(data) == e)}), ]
datamerge = as.matrix(datamerge)
pdf(paste0(filepath,outpdf),height = 8,width = 8)
pheatmap(datamerge,
annotation_row  = group,
color=colorRampPalette(c("blue", "white", "red"))(50),               #颜色分为50份
cluster_cols = T,                                                    #不执行聚类，否则肿瘤组和对照组会被打乱
cluster_rows = F, #TF
fontsize = 15,
fontsize_row = 15,                                                   #行名显示大小
fontsize_col = 15,                                                   #列名显示大小
border_color = NA
)
dev.off()
}
i=2
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
celltype
celltype = str_split(str_split(input_files[i],'[.]',simplify=T)[,2],'[_]',simplify=T)[,2]
celltype
celltype = str_split(str_split(input_files[i],'[.]',simplify=T)[,2],'[_]',simplify=T)[,2]
celltype = str_split(str_split(input_files[i],'[.]',simplify=T)[,2],'[_]',simplify=T)[,1]
celltype
celltype = str_split(str_split(input_files[i],'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
1
celltype
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
for(i in 1:length(input_files)){
celltype = str_split(str_split(input_files[i],'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
data=data[rownames(data)%in%rownames(group),]
# 将原数据框，按照指定的列顺序，重新排序
datamerge = data[sapply(rownames(group), function(e) {which(rownames(data) == e)}), ]
datamerge = as.matrix(datamerge)
pdf(paste0(filepath,outpdf),height = 8,width = 8)
pheatmap(datamerge,
annotation_row  = group,
color=colorRampPalette(c("blue", "white", "red"))(50),               #颜色分为50份
cluster_cols = T,                                                    #不执行聚类，否则肿瘤组和对照组会被打乱
cluster_rows = F, #TF
fontsize = 15,
fontsize_row = 15,                                                   #行名显示大小
fontsize_col = 15,                                                   #列名显示大小
border_color = NA
)
dev.off()
}
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
for(i in 1:length(input_files)){
celltype = str_split(str_split(input_files[i],'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
data=data[rownames(data)%in%rownames(group),]
# 将原数据框，按照指定的列顺序，重新排序
datamerge = data[sapply(rownames(group), function(e) {which(rownames(data) == e)}), ]
datamerge = as.matrix(datamerge)
pdf(paste0(filepath,outpdf),height = 8,width = 8)
pheatmap(datamerge,
annotation_row  = group,
color=colorRampPalette(c("blue", "white", "red"))(50),
cluster_cols = T,
cluster_rows = T,
fontsize = 15,
fontsize_row = 15,
fontsize_col = 15,
border_color = NA
)
dev.off()
}
#对CS(Cell States)和细胞特异性基因表达的相关性系数绘制热图
rm(list=ls())
library(stringr)
library(pheatmap)
setwd(".")
filepath=paste0("./result/GSE119409_cs_ecotyper/")
input_group="./datasets/ecotyper/"
if(!dir.exists(filepath)){
dir.create(filepath)
}
input_files = list.files(path = filepath,pattern = paste0(".txt$"))
input_file_group = "GSE119409_cs_minus_updown.txt"
for(i in 1:length(input_files)){
celltype = str_split(str_split(input_files[i],'[.]',simplify=T)[,1],'[_]',simplify=T)[,1]
outpdf = paste0(str_split(input_files[i],'.txt',simplify=T)[,1],".pdf")                                                            #输出的文件名
data <- read.table(paste0(filepath,input_files[i]),sep = "\t",header=T,check.names=F,row.names=1)
data = data[,!grepl("p.value",colnames(data))]
group <- read.table(paste0(input_group,input_file_group),sep = "\t",header=T,check.names=F,row.names = 1)
colnames(group)=" Type  "
group = group[grepl(celltype,rownames(group)),,drop=FALSE]
data=data[rownames(data)%in%rownames(group),]
# 将原数据框，按照指定的列顺序，重新排序
datamerge = data[sapply(rownames(group), function(e) {which(rownames(data) == e)}), ]
datamerge = as.matrix(datamerge)
pdf(paste0(filepath,outpdf),height = 8,width = 8)
pheatmap(datamerge,
annotation_row  = group,
color=colorRampPalette(c("blue", "white", "red"))(50),
cluster_cols = T,
cluster_rows = T,
fontsize = 15,
fontsize_row = 10,
fontsize_col = 15,
border_color = NA
)
dev.off()
}
library(CellChat)
#使用CellChat对直肠癌的单细胞数据进行分析
rm(list=ls())
library(CellChat)
library(patchwork)
library(stringr)
options(stringsAsFactors = FALSE)
# -----------------------------------第一部分.数据的预处理------------------------------------------------
load("./datasets/GSE132465_tumor_original.RData")#TPM数据，没有做细胞注释
# -----------------------------------第一部分.数据的预处理------------------------------------------------
load("./datasets/cellchat/GSE132465_tumor_original.RData")#TPM数据，没有做细胞注释
data.input = data
colnames_data=str_split(colnames(data.input),'[.]',simplify=T)
colnames(data.input)=paste0(colnames_data[,2],'-',colnames_data[,3])
rownames(data.input)=str_split(rownames(data.input),'["]',simplify=T)[,2]
meta = label # a dataframe with rownames containing cell mata data
meta$Cell_type = gsub(pattern=' ', replacement='', meta$Cell_type, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
table(colnames(data.input)%in%meta$Index)
meta=meta[meta$Index%in%colnames(data.input),]
rownames(meta)=meta[,1]
meta=meta[,-1]
data.input = as.matrix(data.input[,rownames(meta)])
#创建一个CellChat对象
cellchat <- createCellChat(object = data.input, meta = meta, group.by = "Cell_type")
CellChatDB <- CellChatDB.human
# 使用 CellChatDB 的一个子集进行细胞间通信分析
# CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling")
# 使用所有 CellChatDB 进行细胞间通信分析
CellChatDB.use <- CellChatDB
# 在对象中设置使用的数据库
cellchat@DB <- CellChatDB.use
cellchat <- subsetData(cellchat)
future::plan("multiprocess", workers = 4)
# 识别过度表达的交互
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
# 计算通信概率并推断细胞通信网络
cellchat <- computeCommunProb(cellchat)
# 如果某些细胞组中只有少数细胞，则过滤掉细胞间通讯
cellchat <- filterCommunication(cellchat, min.cells = 10)
df.net <- subsetCommunication(cellchat)
outTab=df.net
write.table(outTab, file=paste0(outpath,"cellchat_dfnet(GSE132465_T).txt"), sep="\t", quote=F, row.names = F,col.names=T)
outpath="./result/cellchat/"
outTab=df.net
write.table(outTab, file=paste0(outpath,"cellchat_dfnet(GSE132465_T).txt"), sep="\t", quote=F, row.names = F,col.names=T)
# 在信号通路水平上推断细胞间通讯
computeAveExpr(cellchat, type =  "truncatedMean", trim = 0.1)
cellchat <- computeCommunProbPathway(cellchat)
cellchat@netP$pathways
pathway=as.data.frame(cellchat@netP$pathways)
cellchat_sp=as.data.frame(cellchat@netP[["prob"]])#每个信号通路的通讯网络(netP)
outTab=rbind(id=colnames(cellchat_sp),cellchat_sp)
write.table(outTab, file=paste0(outpath,"/3.cellchat_sp.txt"), sep="\t", quote=F, row.names = T,col.names=F)
# 在单个受配体对水平上推断细胞间通讯
cellchat_LR=as.data.frame(cellchat@net[["prob"]])#每个配体受体对的通讯网络(net)
cellchat_LR=cellchat_LR[,colSums(cellchat_LR)>0]
outTab=rbind(id=colnames(cellchat_LR),cellchat_LR)
write.table(outTab, file=paste0(outpath,"/2.cellchat_LR.txt"), sep="\t", quote=F, row.names = T,col.names=F)
# 可以通过计算链路的数量或总结通信概率来计算聚合的细胞-细胞通信网络。
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
mat <- cellchat@net$weight
par(mfrow = c(2,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
#查看单个细胞与其它细胞的通讯强度
par(mfrow = c(1,1), xpd=TRUE)
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[1, ] <- mat[1, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[1])
pdf(paste0(outpath,"/3.All_Circle.pdf"),height = 12,width = 12)
for (i in 1:nrow(mat)) {
# par(mfrow = c(1,1), xpd=TRUE)
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
dev.off()
# -----------------------第三部分：细胞间通信网络的可视化 --------------------------------
pathways.show <- cellchat@netP$pathways
# 层次图
vertex.receiver = seq(1,3)
netVisual_aggregate(cellchat,
signaling = pathways.show,
signaling.name="All",
vertex.receiver = vertex.receiver,
layout = "hierarchy",                   #层次图
vertex.weight=NULL,                     #设置绘制不同大小的顶点
pt.title=18,
title.space	=3,
show.legend=FALSE
)
# 圆图
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show,signaling.name="All",layout = "circle")
# 和弦图
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show,signaling.name="All", layout = "chord")
# 热图
for(i in 1:length(pathways.show)){
pdf(paste0(outpath,"4.Heatmap/",i,".",pathways.show[i],"_Heatmap.pdf"),height = 5,width = 7)
# par(mfrow=c(1,1))
plot(netVisual_heatmap(cellchat, signaling = pathways.show[i], color.heatmap = "Reds"))
dev.off()
}
#绘制在同一张图中
pdf(paste0(outpath,"4.Heatmap/all.pdf"),height = 5,width = 7)
for(i in 1:length(pathways.show)){
plot(netVisual_heatmap(cellchat, signaling = pathways.show[i], color.heatmap = "Reds"))
}
dev.off()
#可视化由多个配体受体或信号通路介导的细胞间通
celltype=names(table(cellchat@idents))
i=6
length(pathways.show)
paste0(outpath,"4.Heatmap/",i,".",pathways.show[i],"_Heatmap.pdf"
)
pathways.show <- cellchat@netP$pathways
# 层次图
vertex.receiver = seq(1,3)
netVisual_aggregate(cellchat,
signaling = pathways.show,
signaling.name="All",
vertex.receiver = vertex.receiver,
layout = "hierarchy",                   #层次图
vertex.weight=NULL,                     #设置绘制不同大小的顶点
pt.title=18,
title.space	=3,
show.legend=FALSE
)
# 圆图
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show,signaling.name="All",layout = "circle")
# 和弦图
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show,signaling.name="All", layout = "chord")
# 热图
for(i in 1:length(pathways.show)){
pdf(paste0(outpath,i,".",pathways.show[i],"_Heatmap.pdf"),height = 5,width = 7)
# par(mfrow=c(1,1))
plot(netVisual_heatmap(cellchat, signaling = pathways.show[i], color.heatmap = "Reds"))
dev.off()
}
#绘制在同一张图中
pdf(paste0(outpath,"Heatmap_all.pdf"),height = 5,width = 7)
for(i in 1:length(pathways.show)){
plot(netVisual_heatmap(cellchat, signaling = pathways.show[i], color.heatmap = "Reds"))
}
dev.off()
#可视化由多个配体受体或信号通路介导的细胞间通
celltype=names(table(cellchat@idents))
celltype=names(table(cellchat@idents))
i=1
pdf(paste0(outpath,i,".",celltype[i],".pdf"),height =6,width = 7)
plot(netVisual_bubble(cellchat, sources.use = i, remove.isolate = FALSE))
dev.off()
#绘制在同一张图中
pdf(paste0(outpath,"Point_all.pdf"),height = 15,width = 8)
plot(netVisual_bubble(cellchat, sources.use = 1, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 2, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 4, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 5, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 6, remove.isolate = FALSE))
dev.off()
celltype
celltype=names(table(cellchat@idents))
for (i in 1:length(celltype)){
pdf(paste0(outpath,i,".",celltype[i],".pdf"),height =6,width = 7)
plot(netVisual_bubble(cellchat, sources.use = i, remove.isolate = FALSE))
dev.off()
#绘制在同一张图中
pdf(paste0(outpath,"Point_all.pdf"),height = 15,width = 8)
plot(netVisual_bubble(cellchat, sources.use = 1, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 2, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 4, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 5, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 6, remove.isolate = FALSE))
dev.off()
}
celltype=names(table(cellchat@idents))
i=6
pdf(paste0(outpath,i,".",celltype[i],".pdf"),height =6,width = 7)
plot(netVisual_bubble(cellchat, sources.use = i, remove.isolate = FALSE))
dev.off()
#绘制在同一张图中
pdf(paste0(outpath,"Point_all.pdf"),height = 15,width = 8)
plot(netVisual_bubble(cellchat, sources.use = 1, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 2, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 4, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 5, remove.isolate = FALSE))
plot(netVisual_bubble(cellchat, sources.use = 6, remove.isolate = FALSE))
dev.off()
# 使用小提琴/点图绘制信号基因表达分布 -------------------------
# for(i in 1:length(pathways.show)){
#   pdf(paste0(outpath,i,".",pathways.show[i],"_GeneExp.pdf"),height = 9,width = 6)
#   plot(plotGeneExpression(cellchat, signaling = pathways.show[i]))
#   dev.off()
# }
#绘制在一张图中
pdf(paste0(outpath,"GeneExp_all.pdf"),height = 9,width = 6)
for(i in 1:length(pathways.show)){
plot(plotGeneExpression(cellchat, signaling = pathways.show[i]))
}
dev.off()
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP") # 插槽“netP”表示推断的信号通路的细胞间通信网络
# 使用热图可视化计算的中心性分数，从而可以轻松识别细胞群的主要信号作用
# for(i in 1:length(pathways.show)){
#   pdf(paste0(outpath,"7.Role/",i,".",pathways.show[i],"_Role.pdf"),height = 5,width = 8)
#   netAnalysis_signalingRole_network(cellchat, signaling = pathways.show[i],height = 7,width = 13, font.size = 15,font.size.title = 15)
#   dev.off()
# }
#绘制在同一张图上
pdf(paste0(outpath,"Role_all.pdf"),height = 5,width = 8)
for(i in 1:length(pathways.show)){
netAnalysis_signalingRole_network(cellchat, signaling = pathways.show[i],height = 7,width = 13, font.size = 15,font.size.title = 15)
}
dev.off()
